@model ChalmersxTools.Models.View.EarthMassV2ToolViewModel

@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>EarthMassToolView</title>
    <link href="css/main.css" rel="stylesheet" />
</head>
<body>
    <div>
        <div id="message-box">@Html.Raw(Model.ResponseMessage)</div>
        <form id="earth-mass" method="post">
            <div>
                <label for="meanGravityAcceleration">Measured Mean Gravity Acceleration</label>
                <input id="meanGravityAcceleration" name="meanGravityAcceleration" type="url" value="@(Model.Submission == null ? "" : Model.Submission.MeanGravityAcceleration.ToString("e3"))" />
            </div>
            <div>
                <label for="earthMass">Calculated Total Mass of Earth</label>
                <input id="earthMass" name="earthMass" type="url" value="@(Model.Submission == null ? "" : Model.Submission.TotalEarthMass.ToString("e3"))" />
            </div>
            <div>
                <label for="location">Location</label>
                <input id="location" name="location" type="text" value="@(Model.Submission == null ? "" : Model.Submission.Location)" />
                <input type="hidden" id="latitude" name="latitude" value="">
                <input type="hidden" id="longitude" name="longitude" value="">
            </div>
            <div style="padding-top: 10px;">
                <input type="button" value="Save" onclick="validateAndSubmitForm();">
            </div>
            <input type="hidden" name="action" value="@(Model.Submission == null ? "create" : "edit")">
            <input type="hidden" name="ltiSessionId" value="@Model.LtiSessionId">
        </form>
        <div id="visualizationContainer" style="display: none;">
            <canvas id="visualization" width="640" height="480"></canvas>
        </div>
        @if (Model.Roles == "Administrator" || Model.Roles == "Instructor")
        {
            <br>
            <hr>
            <br>
            <div>
                <p>This information is not visible for students.</p>
                <a href="/Tool/GetData?ltiSessionId=@Model.LtiSessionId">Download data</a>
            </div>
            <div>
                <p>Earth Mass Average: @Model.EarthMassAverage.ToString("e3")</p>
                <p>Number of Submissions: @Model.NumberOfSubmissions.ToString()</p>
            </div>
        }
    </div>
    <script src="https://maps.googleapis.com/maps/api/js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.4/jquery.min.js"></script>
    <script src="~/js/Chartjs/Chart.min.js"></script>
    <script>
        var geocoder;
        var ctx;
        var visChart;

        window.onload = function initialize() {
            geocoder = new google.maps.Geocoder();

            if ($("#meanGravityAcceleration").val() != "" && $("#earthMass").val() != "" && $("#location").val() != "") {

                var measurements = [@String.Join(",", Model.Measurements)];

                /*var measurements = [
                  5.343e24,
                  5.843e24,
                  6.412e24,
                  5.812e24,
                  5.912e24,
                  5.633e24,
                  6.821e24
                ];*/

                var numberOfCumulativeAverages = 10;
                var cumulativeAveragesStep = measurements.length / numberOfCumulativeAverages;
                var cumulativeAveragesIndexes = [];
                for (var i = 0; i < numberOfCumulativeAverages; i++) {
                    cumulativeAveragesIndexes.push(Math.floor(i * cumulativeAveragesStep));
                }

                var accumulatedMass = 0.0;
                var userMeasurementsData = [];
                var cumulativeAverageData = [];
                for (var i = 0; i < measurements.length; i++) {
                    accumulatedMass += measurements[i];
                    userMeasurementsData.push({
                        x: i + 1,
                        y: measurements[i]
                    });
                    if (cumulativeAveragesIndexes.indexOf(i) >= 0 || i == measurements.length - 1) {
                        cumulativeAverageData.push({
                            x: i + 1,
                            y: accumulatedMass / (i + 1)
                        });
                    }
                }

                ctx = document.getElementById("visualization").getContext("2d");
                visChart = new Chart(ctx, {
                    type: 'line',
                    data: {
                        datasets: [
                          {
                              label: "Correct Earth Mass",
                              fill: false,
                              lineTension: 0.1,
                              backgroundColor: "rgba(75,192,75,0.4)",
                              borderColor: "rgba(75,192,75,1)",
                              borderCapStyle: 'butt',
                              borderDash: [],
                              borderDashOffset: 0.0,
                              borderJoinStyle: 'miter',
                              pointBorderColor: "rgba(75,192,75,1)",
                              pointBackgroundColor: "#fff",
                              pointBorderWidth: 1,
                              pointHoverRadius: 5,
                              pointHoverBackgroundColor: "rgba(75,192,75,1)",
                              pointHoverBorderColor: "rgba(220,220,220,1)",
                              pointHoverBorderWidth: 2,
                              pointRadius: 1,
                              pointHitRadius: 10,
                              data: [{
                                  x: 1,
                                  y: 5.972e24
                              }, {
                                  x: userMeasurementsData.length < 2 ? 2 : userMeasurementsData.length,
                                  y: 5.972e24
                              }],
                              spanGaps: false,
                          },
                          {
                              label: "User Measurements",
                              fill: false,
                              lineTension: 0.1,
                              backgroundColor: "rgba(192,75,75,0.4)",
                              borderColor: "rgba(192,75,75,0)",
                              borderCapStyle: 'butt',
                              borderDash: [],
                              borderDashOffset: 0.0,
                              borderJoinStyle: 'miter',
                              pointBorderColor: "rgba(192,75,75,1)",
                              pointBackgroundColor: "#fff",
                              pointBorderWidth: 3,
                              pointHoverRadius: 5,
                              pointHoverBackgroundColor: "rgba(192,75,75,1)",
                              pointHoverBorderColor: "rgba(220,220,220,1)",
                              pointHoverBorderWidth: 2,
                              pointRadius: 1,
                              pointHitRadius: 10,
                              data: userMeasurementsData,
                              spanGaps: false,
                          },
                          {
                              label: "Cumulative Average",
                              fill: false,
                              lineTension: 0.1,
                              backgroundColor: "rgba(192,192,75,0.4)",
                              borderColor: "rgba(192,192,75,1)",
                              borderCapStyle: 'butt',
                              borderDash: [],
                              borderDashOffset: 0.0,
                              borderJoinStyle: 'miter',
                              pointBorderColor: "rgba(192,192,75,1)",
                              pointBackgroundColor: "#fff",
                              pointBorderWidth: 1,
                              pointHoverRadius: 5,
                              pointHoverBackgroundColor: "rgba(192,192,75,1)",
                              pointHoverBorderColor: "rgba(220,220,220,1)",
                              pointHoverBorderWidth: 2,
                              pointRadius: 1,
                              pointHitRadius: 10,
                              data: cumulativeAverageData,
                              spanGaps: false,
                          }
                        ]
                    },
                    options: {
                        scales: {
                            xAxes: [{
                                type: 'linear',
                                position: 'bottom',
                                ticks: {
                                    min: 1,
                                    max: userMeasurementsData.length < 2 ? 2 : userMeasurementsData.length
                                }
                            }],
                            yAxes: [{
                                ticks: {
                                    userCallback: function (value, index, values) {
                                        return Math.round(value / 1e21) * 1e21; // Fix so that we don't get many decimals on y-axis.
                                    }
                                }
                            }]
                        }
                    }
                });

                $("#visualizationContainer").show();
            }
        }

        function validateAndSubmitForm() {
            $("#message-box").text("");
            $("#earthMass").val($("#earthMass").val().replace(",", "."));
            $("#meanGravityAcceleration").val($("#meanGravityAcceleration").val().replace(",", "."));


            if ($("#meanGravityAcceleration").val() == "") {
                $("#message-box").html("<span style='color: red;'>You have to enter a value for the mean gravity acceleration.</span>");
            } else if ($("#earthMass").val() == "") {
                $("#message-box").html("<span style='color: red;'>You have to enter a value for the total mass of earth.</span>");
            } else if ($("#location").val() == "") {
                $("#message-box").html("<span style='color: red;'>You have to enter a valid location.</span>");
            } else if ($("#earthMass").val() >= 3e24 && $("#earthMass").val() <= 9e24) {
                $("#message-box").html("<span style='color: red;'>Your value for the mass of planet earth seems to be incorrect.</span>");
            } else {
                geocoder.geocode({ "address": $("#location").val() }, function (results, status) {
                    if (status == google.maps.GeocoderStatus.OK) {
                        $("#latitude").val(results[0].geometry.location.lat());
                        $("#longitude").val(results[0].geometry.location.lng());
                        document.forms["earth-mass"].submit();
                    } else {
                        $("#message-box").html("<span style='color: red;'><p><b>Location not found</b>, please provide a more specific description of your location.</p></span>");
                    }
                });
            }
        }
    </script>
</body>
</html>
